version: '3.3'

services:
  krs-service:
    image: ghcr.io/coder-repository/krs-service:latest
    platform: linux/amd64
    build:
      context: .
      dockerfile: ./apps/krs-service/Dockerfile
    container_name: krs-service
    ports:
      - "5008:5008"
    environment:
      - PORT=5008
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_USER=postgres
      - DB_PASSWORD=postgres
      - DB_NAME=coder-siakad
      - DB_SSL=false
    networks:
      - siakad-network

  schedule-service:
    image: ghcr.io/coder-repository/schedule-service:latest
    platform: linux/amd64
    build:
      context: .
      dockerfile: ./apps/schedule-service/Dockerfile
    container_name: schedule-service
    ports:
      - "5010:5010"
    environment:
      - PORT=5010
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_USER=postgres
      - DB_PASSWORD=postgres
      - DB_NAME=coder-siakad
      - DB_SSL=false
    depends_on:
      - postgres
    networks:
      - siakad-network

  user-service:
    image: ghcr.io/coder-repository/user-service:latest
    platform: linux/amd64
    build:
      context: .
      dockerfile: ./apps/user-service/Dockerfile
    container_name: user-service
    ports:
      - "5003:5003"
    environment:
      - PORT=5003
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_USER=postgres
      - DB_PASSWORD=postgres
      - DB_NAME=coder-siakad
    networks:
      - siakad-network
    depends_on:
      - postgres

  auth-service:
    image: ghcr.io/coder-repository/auth-service:latest
    platform: linux/amd64
    build:
      context: .
      dockerfile: ./apps/auth-service/Dockerfile
    container_name: auth-service
    ports:
      - "5001:5001"
    environment:
      - PORT=5001
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_USER=postgres
      - DB_PASSWORD=postgres
      - DB_NAME=coder-siakad
      - DB_SSL=false
      - JWT_SECRET=c70012035ab511e9c577c63366878648546aa5361537063306161537177330ad
    networks:
      - siakad-network
    depends_on:
      - postgres

  data-service:
    image: ghcr.io/data-repository/data-service:latest
    platform: linux/amd64
    build:
      context: .
      dockerfile: ./apps/data-service/Dockerfile
    container_name: data-service
    ports:
      - "5009:5009"
    environment:
      - PORT=5009
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_USER=postgres
      - DB_PASSWORD=postgres
      - DB_NAME=coder-siakad
      - DB_SSL=false
    networks:
      - siakad-network
    depends_on:
      - postgres

  dashboard-service:
    image: ghcr.io/coder-repository/dashboard-service:latest
    platform: linux/amd64
    build:
      context: .
      dockerfile: ./apps/dashboard-service/Dockerfile
    container_name: dashboard-service
    ports:
      - "5010:5010"
    environment:
      - PORT=5010
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_USER=postgres
      - DB_PASSWORD=postgres
      - DB_NAME=coder-siakad
      - DB_SSL=false
    networks:
      - siakad-network
    depends_on:
      - postgres

  mock-service:
    image: ghcr.io/coder-repository/mock-service:latest
    platform: linux/amd64
    build:
      context: .
      dockerfile: ./apps/mock-service/Dockerfile
    container_name: mock-service
    ports:
      - "5002:5002"
    networks:
      - siakad-network

  payment-service:
    image: ghcr.io/coder-repository/payment-service:latest
    platform: linux/amd64
    build:
      context: apps/payment-service
      dockerfile: Dockerfile
    container_name: payment-service
    depends_on:
      - postgres
    environment:
      - PORT=5004
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_USERNAME=postgres
      - DB_PASSWORD=postgres
      - DB_DATABASE=coder-siakad
      - CLOUDINARY_CLOUD_NAME=dsgv7kpmq
      - CLOUDINARY_API_KEY=211669514833157
      - CLOUDINARY_API_SECRET=0w1ckZHtqg8Uyp9zfOwmVZJv4w8
    ports:
      - "5004:5004"
    networks:
      - siakad-network

  announcement-service:
    image: ghcr.io/coder-repository/announcement-service:latest
    platform: linux/amd64
    build:
      context: apps/announcement-service
      dockerfile: Dockerfile
    container_name: announcement-service
    depends_on:
      - postgres
    environment:
      - PORT=5007
      - DB_CONNECTION=pgsql
      - DB_HOST=postgres
      #      - DB_HOST=ep-raspy-glitter-a1fuh4un-pooler.ap-southeast-1.aws.neon.tech
      - DB_PORT=5432
      - DB_DATABASE=coder-siakad
      #      - DB_USERNAME=oktariorifqi
      - DB_USERNAME=postgres
      #      - DB_PASSWORD=WbVHOqg0m6Gw
      - DB_PASSWORD=postgres
    ports:
      - "5007:5007"
    networks:
      - siakad-network

  postgres:
    image: postgres:13
    restart: always
    container_name: siakad-db
    shm_size: 256MB
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: coder-siakad
    healthcheck:
      test: pg_isready -U postgres -d postgres
      interval: 10s
      timeout: 3s
      retries: 5
    ports:
      - "6432:5432"
    volumes:
      - postgres_siakad:/var/lib/postgresql/data
    networks:
      - siakad-network

  migrate:
    image: ghcr.io/coder-repository/db-migrate:latest
    platform: linux/amd64
    build:
      context: apps/db-migrate
      dockerfile: Dockerfile
    networks:
      - siakad-network
    depends_on:
      - postgres
    links:
      - postgres
    environment:
      - DATABASE_URL=postgres://postgres:postgres@postgres:5432/coder-siakad?sslmode=disable

  seed:
    image: ghcr.io/coder-repository/db-seed:latest
    platform: linux/amd64
    build:
      context: apps/db-seed
      dockerfile: Dockerfile
    networks:
      - siakad-network
    depends_on:
      - postgres
      - migrate
    links:
      - postgres
      - migrate
    environment:
      - DB_CONNECTION=pgsql
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_DATABASE=coder-siakad
      - DB_USERNAME=postgres
      - DB_PASSWORD=postgres

  redis:
    image: redis:6
    container_name: siakad-redis
    ports:
      - "7379:6379"
    networks:
      - siakad-network

  kong:
    image: ghcr.io/coder-repository/kong-siakad-service:latest
    build:
      context: apps/kong-gateway-service
      dockerfile: Dockerfile
    volumes:
      - ./apps/kong-gateway-service/config:/etc/kong/declarative
    environment:
      # Use the config defined in config/kong.yml
      KONG_DATABASE: "off"
      KONG_DECLARATIVE_CONFIG: /etc/kong/declarative/kong.yml
      # Show all output in the terminal when running with Docker
      KONG_ADMIN_ACCESS_LOG: /dev/stdout
      KONG_ADMIN_ERROR_LOG: /dev/stderr
      KONG_PROXY_ACCESS_LOG: /dev/stdout
      KONG_PROXY_ERROR_LOG: /dev/stderr
      # Enable the JS plugin server
      KONG_PLUGINSERVER_NAMES: js
      KONG_PLUGINSERVER_JS_SOCKET: /usr/local/kong/js_pluginserver.sock
      KONG_PLUGINSERVER_JS_START_CMD: /usr/local/bin/kong-js-pluginserver -v --plugins-directory /usr/local/kong/js-plugins
      KONG_PLUGINSERVER_JS_QUERY_CMD: /usr/local/bin/kong-js-pluginserver --plugins-directory /usr/local/kong/js-plugins --dump-all-plugins
      KONG_LOG_LEVEL: debug
      SECRET: "c70012035ab511e9c577c63366878648546aa5361537063306161537177330ad"
      ISSUER: "siakad-service"
      # Allow plugins to be used. The plugin name is your JS file name e.g. hello.js
      KONG_PLUGINS: bundled,auth,cors
      KONG_RESPONSE_TRANSFORMER_REMOVE_HEADERS: false
    ports:
      - "8000:8000/tcp"
    healthcheck:
      test: [ "CMD", "kong", "health" ]
      interval: 10s
      timeout: 10s
      retries: 10
    restart: on-failure
    networks:
      - siakad-network

volumes:
  postgres_siakad:

networks:
  siakad-network:
